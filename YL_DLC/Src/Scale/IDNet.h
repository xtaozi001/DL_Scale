#ifndef _IDNET_H
#define _IDNET_H

typedef enum
{
	IDNET_MOTION_NOT_APPLICABLE = 0,
	IDNET_MOTION_STATIC = ' ',
	IDNET_MOTION_DYNAMIC = 'D'
}IDNET_MOTION_STATUS;

typedef enum
{
	IDNET_TARE_NOT_APPLICABLE = 0,
	IDNET_TARE_ACCEPTED = 'B',
	IDNET_TARE_REJECTED = 'L',
	IDNET_TARE_OVER = '+',
	IDNET_TARE_UNDER = '-'
} IDNET_TARE_STATUS;

typedef enum
{
	IDNET_OUT_OF_RANGE_NOT_APPLICABLE = 0,
	IDNET_OUT_OF_RANGE_NEITHER = ' ',
	IDNET_OUT_OF_RANGE_OVER = '+',
	IDNET_OUT_OF_RANGE_UNDER = '-',
	IDNET_CENTER_OF_ZERO = 'Z'
} IDNET_OUT_OF_RANGE_STATUS;

typedef enum
{
	IDNET_ZERO_NOT_APPLICABLE = 0,
	IDNET_ZERO_APPLICABLE = 1,
	IDNET_ZERO_ACCEPTED = 'B',
	IDNET_ZERO_REJECTED = 'L',
	IDNET_ZERO_OVER = '+',
	IDNET_ZERO_UNDER = '-'
} IDNET_ZERO_STATUS;

typedef enum
{
	SUCESS = 0,
	IDNET_SCALE_IN_MASTER_MODE,
	IDNET_RESPONSE_TIMEOUT,
	IDNET_SYNTAX_ERROR_RESPONSE,
	IDNET_INVALID_PROTOCOL_RESPONSE,
	IDNET_SCALE_IN_MOTION,
	IDNET_WEIGHT_UNITS_INVALID,
	IDNET_NOT_PLUG
} IDNET_STATUS;

#endif // _IDNET_H
